name: Build and Release

on:
  push:
    branches:
      - server-client
  workflow_dispatch:

jobs:
  linux-client-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.4"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev python3-pyaudio
          python -m pip install --upgrade pip
          pip install -r client/requirements_linux.txt

      - name: Build application
        run: |
          cd client
          python setup.py build

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: build-output-linux
          path: client/build/

  windows-client-build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.4"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r client/requirements_windows.txt

      - name: Build application
        run: |
          cd client
          python setup.py build
        shell: cmd

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: build-output-windows-client
          path: client/build/

  windows-backend-build:
    runs-on: windows-2019
    steps:
      - name: Install cuDNN, CUDA, nvCOMP, etc
        shell: cmd
        run: |
          cd /d %USERPROFILE%
          echo Installing CUDA, cuDNN, nvCOMP, etc
          curl -LO https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_522.06_windows.exe
          curl -LO https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda_12.3.2_546.12_windows.exe
          rem curl -LO https://developer.download.nvidia.com/compute/redist/cudnn/v8.8.0/local_installers/12.0/cudnn_8.8.0.121_windows.exe
          rem python -m gdown.cli https://drive.google.com/uc?id=135Z7zfwguQe6vn7p013HtVkHFu9-_rru
          curl -LO https://github.com/bytedeco/binaries/releases/download/1.5.10/cudnn-windows-x86_64-8.9.7.29_cuda12-archive.zip
          curl -LO http://www.winimage.com/zLibDll/zlib123dllx64.zip
          curl -LO https://developer.download.nvidia.com/compute/nvcomp/3.0.5/local_installers/nvcomp_3.0.5_windows_12.x.zip
          cuda_11.8.0_522.06_windows.exe -s
          bash -c "rm -Rf 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.8'"
          bash -c "mv 'C:/Program Files/NVIDIA Corporation/NvToolsExt' 'C:/Program Files/NVIDIA Corporation/NvToolsExt_old'"
          cuda_12.3.2_546.12_windows.exe -s
          bash -c "mv 'C:/Program Files/NVIDIA Corporation/NvToolsExt_old' 'C:/Program Files/NVIDIA Corporation/NvToolsExt'"
          bash -c "ls 'C:/Program Files/NVIDIA Corporation/NvToolsExt'"
          rem cudnn_8.8.0.121_windows.exe -s
          unzip cudnn-windows-x86_64-8.9.7.29_cuda12-archive.zip
          unzip zlib123dllx64.zip
          unzip nvcomp_3.0.5_windows_12.x.zip
          rem move "%ProgramFiles%\NVIDIA\CUDNN\v8.8\bin\*.dll" "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin"
          rem move "%ProgramFiles%\NVIDIA\CUDNN\v8.8\include\*.h" "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\include"
          rem move "%ProgramFiles%\NVIDIA\CUDNN\v8.8\lib\x64\*.lib" "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\lib\x64"
          move cudnn-windows-x86_64-8.9.7.29_cuda12-archive\bin\*.dll "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin"
          move cudnn-windows-x86_64-8.9.7.29_cuda12-archive\include\*.h "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\include"
          move cudnn-windows-x86_64-8.9.7.29_cuda12-archive\lib\x64\*.lib "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\lib\x64"
          move dll_x64\zlibwapi.dll "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin"
          move include\* "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\include"
          move include\gdeflate "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\include"
          move include\native "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\include"
          move include\nvcomp "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\include"
          move lib\nvcomp*.dll "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin"
          move lib\nvcomp*.lib "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\lib\x64"

          rem echo Applying hotfix to Visual Studio 2019 for CUDA
          rem curl -LO https://raw.githubusercontent.com/microsoft/STL/main/stl/inc/cmath
          rem bash -c "find 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/' -name cmath -exec cp -v cmath {} \;"
          bash -c "sed -i 's/cublas_v2.h/cublas_api.h/g' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/cublasXt.h' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/cusolverDn.h' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/cusolverSp.h'"
          bash -c "sed -i 's/#if !defined(__cplusplus) || __cplusplus >= 201103L/#if 1/g' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/driver_types.h'"
          bash -c "sed -i '/block_merge_sort.cuh/d' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/cub/cub.cuh'"
          bash -c "sed -i '/device_merge_sort.cuh/d' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/cub/cub.cuh'"
          bash -c "sed -i '/device_segmented_sort.cuh/d' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/cub/cub.cuh'"
          bash -c "sed -i '/warp_merge_sort.cuh/d' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/include/cub/cub.cuh'"

          set "CUDA_PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3"
          set "CUDA_PATH_V12_3=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3"
          set "PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\libnvvp;%PATH%"
          echo CUDA Version 12.3.2>"%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\version.txt"

          echo "CUDA_PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3" >> $GITHUB_ENV
          echo "CUDA_PATH_V12_3=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3" >> $GITHUB_ENV
          echo "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin" >> $GITHUB_PATH
          echo "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\libnvvp" >> $GITHUB_PATH

          setx CUDA_PATH "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3" /M
          setx CUDA_PATH_V12_3 "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3" /M
          setx PATH "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.3\libnvvp;%PATH%" /M

      - name: Check CUDA installation
        shell: cmd
        run: |
          echo CUDA_PATH: %CUDA_PATH%
          echo CUDA_PATH_V12_3: %CUDA_PATH_V12_3%
          dir "%CUDA_PATH%"

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.4"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install transformers==4.40.1
        shell: bash

      - name: Build application
        run: |
          cd backend
          python setup.py build --verbose
        shell: cmd

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: build-output-windows-backend
          path: backend/build/

  prepare-release:
    needs: [linux-client-build, windows-client-build, windows-backend-build]
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Set release SHA
        run: echo "SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Release-${{ env.SHA }}
          release_name: Releases
          draft: false
          prerelease: false

      - name: Output release URL
        run: echo "release_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT

  linux-client-package-and-upload:
    needs: [linux-client-build, prepare-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-output-linux

      - name: Zip the build directory
        run: zip -r linux-client.zip exe.linux-x86_64-3.11

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.release_url }}
          asset_path: ./linux-client.zip
          asset_name: linux-client.zip
          asset_content_type: application/zip

  windows-client-package-and-upload:
    needs: [windows-client-build, prepare-release]
    runs-on: windows-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-output-windows-client

      - name: Zip the build directory
        run: Compress-Archive -Path exe.win-amd64-3.11 -DestinationPath windows-client.zip
        shell: pwsh

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.release_url }}
          asset_path: ./windows-client.zip
          asset_name: windows-client.zip
          asset_content_type: application/zip

  windows-backend-package-and-upload:
    needs: [windows-backend-build, prepare-release]
    runs-on: windows-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-output-windows-backend

      - name: Zip the build directory
        run: Compress-Archive -Path exe.win-amd64-3.11 -DestinationPath windows-backend.zip
        shell: pwsh

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.release_url }}
          asset_path: ./windows-backend.zip
          asset_name: windows-backend.zip
          asset_content_type: application/zip
